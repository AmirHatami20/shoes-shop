datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------ User -------
model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  orders    Order[]
  carts     Cart[]
  role      String   @default("user")
}

// ------ Proudct -------
model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Float
  discount    Float?
  finalPrice  Float?
  createdAt   DateTime       @default(now())
  colors      ProductColor[]
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  Int
  brand       Brand          @relation(fields: [brandId], references: [id])
  brandId     Int
  orderItems  OrderItem[]
  CartItem    CartItem[]
  material    String?
  totalSells  Int            @default(0)
}

model ProductColor {
  id        Int            @id @default(autoincrement())
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  color     String
  images    ProductImage[]
  sizes     ProductSize[]
}

model ProductImage {
  id             Int          @id @default(autoincrement())
  url            String
  productColor   ProductColor @relation(fields: [productColorId], references: [id], onDelete: Cascade)
  productColorId Int
}

model ProductSize {
  id             Int          @id @default(autoincrement())
  productColor   ProductColor @relation(fields: [productColorId], references: [id], onDelete: Cascade)
  productColorId Int
  size           Int
  stock          Int
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String
  parentId Int?
  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("CategoryToParent")
  products Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

// ------ Cart -------
model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  color     String
  size      Int
  quantity  Int
}

// ------ Order -------
model Order {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  items           OrderItem[]
  status          OrderStatus      @default(PENDING)
  shippingAddress ShippingAddress?
  totalPrice      Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  finalPrice Float
}

model ShippingAddress {
  id             Int     @id @default(autoincrement())
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        Int     @unique
  firstName      String
  lastName       String
  phone          String
  province       String
  city           String
  street         String
  alley          String
  buildingNumber Int
  apartment      Int
  postalCode     String?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
